#
#/****************License************************************************
# * Vocalocity OpenVXI
# * Copyright (C) 2004-2005 by Vocalocity, Inc. All Rights Reserved.
# * This program is free software; you can redistribute it and/or
# * modify it under the terms of the GNU General Public License
# * as published by the Free Software Foundation; either version 2
# * of the License, or (at your option) any later version.
# *  
# * This program is distributed in the hope that it will be useful,
# * but WITHOUT ANY WARRANTY; without even the implied warranty of
# * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# * GNU General Public License for more details.
# *
# * You should have received a copy of the GNU General Public License
# * along with this program; if not, write to the Free Software
# * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
# * Vocalocity, the Vocalocity logo, and VocalOS are trademarks or 
# * registered trademarks of Vocalocity, Inc. 
# * OpenVXI is a trademark of Scansoft, Inc. and used under license 
# * by Vocalocity.
# ***********************************************************************/
#
#**********************************************************************
#
# VXI, Vocalocity VXML interpreter library
# NT make file 
#
#
#**********************************************************************/

#--------------------------------
# Required Environment Variables
#--------------------------------

!ifndef SWISBSDK
!error The environment variable SWISBSDK is not defined (it should point to your baseline directory).
!endif

!ifndef XERCESDIR
!error The environment variable XERCESDIR is not defined.
!endif

# By default, set PRODUCT_LIB_PREFIX to SB
!if "$(PRODUCT_LIB_PREFIX)" == ""
!message PRODUCT_LIB_PREFIX not defined. Defaulting to SB
PRODUCT_LIB_PREFIX = SB
!endif

#--------------------------------
# Project specific settings
#--------------------------------

PROJ_ROOT = ..
BUILDSUBDIRS = \
  $(BUILDDIR)\rec \
  $(BUILDDIR)\prompt \
  $(BUILDDIR)\tel
 
  
PUBLIC_HEADERS =
PUBLIC_ERROR_FILES = \
 	rec\VXIrecErrors.xml \
	rec\VXIrecDiagnostics.xml \
	prompt\VXIpromptErrors.xml \
	prompt\VXIpromptDiagnostics.xml \
	tel\VXItelErrors.xml \
	tel\VXItelDiagnostics.xml \
	VXIobjectErrors.xml \
	VXIobjectDiagnostics.xml \
	VXIclientErrors.xml \
	VXIclientDiagnostics.xml \
	SBclient.cfg

PROJ_CFLAGS = /Zm800 \
	-I"include" \
  -I "$(XERCESDIR)/src"  \
  -I "$(XERCESDIR)/src/xercesc" \
  -I "$(XERCESDIR)/include" \
  -I "$(XERCESDIR)/include/xercesc"\
  -DHAVE_XERCES \
	-DCOMPANY_DOMAIN=L\"com.vocalocity\" \
	-DMODULE_PREFIX=L\"swi:\"

MYLFLAGS = \
  -libpath:"$(XERCESDIR)/lib" \
!if "$(CFG)" == "release"
!if "$(MSVC_VERSION)" == "VC6"
  -libpath:"$(XERCESDIR)/Build/Win32/VC6/Release"
!else
  -libpath:"$(XERCESDIR)/Build/Win32/VC7/Release"
!endif
!else
!if "$(MSVC_VERSION)" == "VC6"
  -libpath:"$(XERCESDIR)/Build/Win32/VC6/Debug"
!else
  -libpath:"$(XERCESDIR)/Build/Win32/VC7/Debug"
!endif
!endif
	
# Suppress using a *.def file to define exports from DLLs, use the
# SYMBOL_EXPORT_DECL definition from VXIheaderPrefix.h instead
NO_DEF_FILES = 1

#--------------------------------
# Static libraries
#--------------------------------
LIBS = 

#--------------------------------
# Dynamic libraries
#--------------------------------
DLLS = VXIrec VXIprompt VXItel

VXIrec_OBJS = \
	$(BUILDDIR)/rec/VXIrec.obj \
	$(BUILDDIR)/rec/VXIrec_utils.obj \
	$(BUILDDIR)/rec/VXIrec.res

VXIrec_LIBS = \
	$(PRODUCT_LIB_PREFIX)trd$(CFG_SUFFIX).lib \
	$(PRODUCT_LIB_PREFIX)char$(CFG_SUFFIX).lib \
  VXIvalue$(CFG_SUFFIX).lib \
  $(XERCES_LIB_PREFIX)xerces-c_2$(CFG_SUFFIX).lib

VXIprompt_OBJS = \
  $(BUILDDIR)/prompt/VXIprompt.obj \
	$(BUILDDIR)/prompt/VXIprompt.res

VXIprompt_LIBS = \
	$(PRODUCT_LIB_PREFIX)trd$(CFG_SUFFIX).lib \
	$(PRODUCT_LIB_PREFIX)char$(CFG_SUFFIX).lib \
	$(PRODUCT_LIB_PREFIX)cache$(CFG_SUFFIX).lib \
	VXIvalue$(CFG_SUFFIX).lib

VXItel_OBJS = \
  $(BUILDDIR)/tel/VXItel.obj \
	$(BUILDDIR)/tel/VXItel.res

VXItel_LIBS = \
  $(PRODUCT_LIB_PREFIX)trd$(CFG_SUFFIX).lib \
  $(PRODUCT_LIB_PREFIX)char$(CFG_SUFFIX).lib \
  VXIvalue$(CFG_SUFFIX).lib

#-------------------------------------
# Programs
#-------------------------------------
PROGS = RunVXI

RunVXI_OBJS = \
	$(BUILDDIR)/VXImain.obj \
	$(BUILDDIR)/VXIclient.obj \
	$(BUILDDIR)/VXIclientUtils.obj \
	$(BUILDDIR)/ConfigFile.obj \
	$(BUILDDIR)/VXIobject.obj \
	$(BUILDDIR)/SBlogListeners.obj \
	$(BUILDDIR)/SBlogOSUtils.obj \
	$(BUILDDIR)/VXIClient.res

RunVXI_LIBS = \
	$(PRODUCT_LIB_PREFIX)trd$(CFG_SUFFIX).lib \
	$(PRODUCT_LIB_PREFIX)char$(CFG_SUFFIX).lib \
	$(PRODUCT_LIB_PREFIX)log$(CFG_SUFFIX).lib \
	$(PRODUCT_LIB_PREFIX)logMapper$(CFG_SUFFIX).lib \
	$(PRODUCT_LIB_PREFIX)jsi$(CFG_SUFFIX).lib \
	$(PRODUCT_LIB_PREFIX)cache$(CFG_SUFFIX).lib \
	$(PRODUCT_LIB_PREFIX)inet$(CFG_SUFFIX).lib \
	VXIvalue$(CFG_SUFFIX).lib \
	VXI$(CFG_SUFFIX).lib
		
#--------------------------------------------
# Include the common def's and config logic
#--------------------------------------------
!include "..\make\i386-win32\make.defs"

#------------------------------------------------
# Targets
#------------------------------------------------
all : $(LIBS) $(DLLS) $(PROGS)

#---------------------------------------------
# Include some rules common to all makefiles
#---------------------------------------------

!include "..\make\i386-win32\make.rules"

#------------------
# Inference rules
#------------------

{rec}.c{$(BUILDDIR)/rec}.obj:
        $(CC) $(CFLAGS) $<

{rec}.cpp{$(BUILDDIR)/rec}.obj:
        $(CC) $(CPPFLAGS) $<

{rec}.rc{$(BUILDDIR)/rec}.res:
        $(RC) $(RFLAGS) /r $<

{prompt}.c{$(BUILDDIR)/prompt}.obj:
        $(CC) $(CFLAGS) $<

{prompt}.cpp{$(BUILDDIR)/prompt}.obj:
        $(CC) $(CPPFLAGS) $<

{prompt}.rc{$(BUILDDIR)/prompt}.res:
        $(RC) $(RFLAGS) /r $<

{tel}.c{$(BUILDDIR)/tel}.obj:
        $(CC) $(CFLAGS) $<

{tel}.cpp{$(BUILDDIR)/tel}.obj:
        $(CC) $(CPPFLAGS) $<

{tel}.rc{$(BUILDDIR)/tel}.res:
        $(RC) $(RFLAGS) /r $<
